import SetTheory.ZFC

namespace SetTheory

open Classical

/- Cartesian Product -/
noncomputable def cartesian_product (x: Set) (y: Set) := separate (ùí´ (ùí´ (x ‚à™ y))) (Œª t: Set => ‚àÉ (a b: Set), a ‚àà x ‚àß b ‚àà y ‚àß t = ‚∏®a, b‚∏©)
notation:115 a:115 "√ó" b: 115  => cartesian_product a b
theorem law_of_cartesian_product: ‚àÄ (x y z: Set), z ‚àà x √ó y ‚Üî ‚àÉ (a b: Set), a ‚àà x ‚àß b ‚àà y ‚àß z = ‚∏®a, b‚∏© := by
  intro x y z; unfold cartesian_product; rewrite [law_of_separate]; simp
  intro a Ha b Hb Hz; apply in_powerset_intro; intro t Ht; apply in_powerset_intro
  intro k Hk; apply in_union_intro; rewrite [Hz] at Ht; unfold pair at Ht
  apply Or.elim (in_unordered_pair_elim Ht)
  . intro Ht1; rewrite [Ht1] at Hk; let Hk1 := in_singleset_elim Hk; rewrite [Hk1]; left; trivial
  . intro Ht1; rewrite [Ht1] at Hk; apply Or.elim (in_unordered_pair_elim Hk)
    . intro Hk2; rewrite [Hk2]; left; trivial
    . intro Hk2; rewrite [Hk2]; right; trivial
theorem in_cartesian_product_intro: ‚àÄ {x y z: Set} (a b: Set), a ‚àà x ‚Üí b ‚àà y ‚Üí z = ‚∏®a, b‚∏© ‚Üí z ‚àà x √ó y := by
  intro x y z a b H1 H2 H3; rewrite [law_of_cartesian_product]
  exists a; exists b
theorem in_cartesian_product_elim: ‚àÄ {x y z: Set}, z ‚àà x √ó y ‚Üí ‚àÉ (a b: Set), a ‚àà x ‚àß b ‚àà y ‚àß z = ‚∏®a, b‚∏© := by
  intro x y z Hz; rewrite [‚Üê law_of_cartesian_product]; trivial
theorem pair_in_cartesian_product_iff: ‚àÄ (a b x y: Set), ‚∏®x, y‚∏© ‚àà a √ó b ‚Üî x ‚àà a ‚àß y ‚àà b := by
  intro a b x y; rewrite [law_of_cartesian_product]; apply Iff.intro
  . intro ‚ü®Œ±, Œ≤, ‚ü®HŒ±, HŒ≤, He‚ü©‚ü©; let ‚ü®Hx, Hy‚ü© := pair_eq_elim He; simp [Hx, Hy, HŒ±, HŒ≤]
  . intro ‚ü®Hx, Hy‚ü©; exists x; exists y
theorem pair_in_cartesian_product_intro: ‚àÄ {a b x y: Set}, x ‚àà a ‚Üí y ‚àà b ‚Üí ‚∏®x, y‚∏© ‚àà a √ó b := by
  intro a b x y Hx Hy; rewrite [pair_in_cartesian_product_iff]; simp [Hx, Hy]
theorem pair_in_cartesian_product_elim: ‚àÄ {a b x y: Set}, ‚∏®x, y‚∏© ‚àà a √ó b ‚Üí x ‚àà a ‚àß y ‚àà b := by
  intro a b x y H; rewrite [‚Üê pair_in_cartesian_product_iff]; trivial

/- Binary Relations -/
noncomputable def in_relation (a b R: Set) := ‚∏®a, b‚∏© ‚àà R
notation:100 a:101 "‚ü™" R:101 "‚ü´" b: 101 => in_relation a b R
theorem relation_intro: ‚àÄ {a b R: Set}, ‚∏®a, b‚∏© ‚àà R ‚Üí a ‚ü™R‚ü´ b := by
  intro a b R H; unfold in_relation; trivial
theorem relation_elim: ‚àÄ {a b R: Set}, a ‚ü™R‚ü´ b ‚Üí ‚∏®a, b‚∏© ‚àà R := by
  intro a b R H; unfold in_relation at H; trivial
noncomputable def relation_constructor (a b: Set) (f: Set ‚Üí Set ‚Üí Prop) := separate (a √ó b) (Œª t: Set => f (pair_left t) (pair_right t))
theorem law_of_relation_constructor: ‚àÄ (a b: Set) (f: Set ‚Üí Set ‚Üí Prop) (x y: Set), x ‚ü™relation_constructor a b f‚ü´ y ‚Üî x ‚àà a ‚àß y ‚àà b ‚àß f x y := by
  intro a b f x y; apply Iff.intro
  . intro H; let H1 := relation_elim H; unfold relation_constructor at H1;
    let ‚ü®Hl, Hr‚ü© := in_separate_elim H1; let ‚ü®Ha, Hb‚ü© := pair_in_cartesian_product_elim Hl
    simp [law_of_pair_left, law_of_pair_right] at Hr; simp [Ha, Hb, Hr]
  . intro ‚ü®Hx, Hy, Hf‚ü©; apply relation_intro; unfold relation_constructor
    apply in_separate_intro
    . apply pair_in_cartesian_product_intro
      . trivial
      . trivial
    . simp [law_of_pair_left, law_of_pair_right, Hf]
theorem relation_constructor_intro: ‚àÄ {a b: Set} {f: Set ‚Üí Set ‚Üí Prop} {x y: Set}, x ‚àà a ‚Üí y ‚àà b ‚Üí f x y ‚Üí x ‚ü™relation_constructor a b f‚ü´ y := by
  intro a b f x y Hx Hy Hf; rewrite [law_of_relation_constructor]; simp [Hx, Hy, Hf]
theorem relation_constructor_elim: ‚àÄ {a b: Set} {f: Set ‚Üí Set ‚Üí Prop} {x y: Set}, x ‚ü™relation_constructor a b f‚ü´ y ‚Üí x ‚àà a ‚àß y ‚àà b ‚àß f x y := by
  intro a b f x y H; rewrite [‚Üê law_of_relation_constructor]; trivial

/- Equivalence Relations -/
noncomputable def relation_refl (a: Set) (R: Set) := ‚àÄ x: Set, x ‚àà a ‚Üí x ‚ü™R‚ü´ x
noncomputable def relation_symm (R: Set) := ‚àÄ (x y: Set), x ‚ü™R‚ü´ y ‚Üí y ‚ü™R‚ü´ x
noncomputable def relation_trans (R: Set) := ‚àÄ (x y z: Set), x ‚ü™R‚ü´ y ‚Üí y ‚ü™R‚ü´ z ‚Üí x ‚ü™R‚ü´ z
noncomputable def equivalence_relations (a: Set) := separate (ùí´ (a √ó a)) (Œª x: Set => (relation_refl a x) ‚àß relation_symm x ‚àß relation_trans x)
theorem law_of_equivalence_relations: ‚àÄ (a R: Set), R ‚àà equivalence_relations a ‚Üî R ‚àà ùí´ (a √ó a) ‚àß relation_refl a R ‚àß relation_symm R ‚àß relation_trans R := by
  intro a R; unfold equivalence_relations; rewrite [law_of_separate]; trivial
theorem in_equivalence_relations_intro: ‚àÄ {a R: Set}, R ‚àà ùí´ (a √ó a) ‚Üí relation_refl a R ‚Üí relation_symm R ‚Üí relation_trans R ‚Üí R ‚àà equivalence_relations a := by
  intro a R; rewrite [law_of_equivalence_relations]; intro H1 H2 H3 H4; simp [H1, H2, H3, H4]
theorem in_equivalence_relations_elim: ‚àÄ {a R: Set}, R ‚àà equivalence_relations a ‚Üí R ‚àà ùí´ (a √ó a) ‚àß relation_refl a R ‚àß relation_symm R ‚àß relation_trans R := by
  simp [law_of_equivalence_relations]

/- Quotient Sets -/
noncomputable def relation_class (R a: Set) := separate (transform R pair_right) (Œª b => a ‚ü™R‚ü´ b)
notation:130 "‚ü¶ " R:131 "," a: 131 " ‚üß" => relation_class R a
theorem law_of_relation_class: ‚àÄ (R a b: Set), b ‚àà ‚ü¶R, a‚üß ‚Üî a ‚ü™R‚ü´ b := by
  intro R a b; unfold relation_class; apply Iff.intro
  . intro H; let ‚ü®H1, H2‚ü© := in_separate_elim H; apply H2
  . intro H; apply in_separate_intro;
    . unfold in_relation at H; apply in_transform_intro (‚∏®a, b‚∏©)
      . apply H
      . simp [law_of_pair_right]
    . trivial
theorem in_relation_class_intro: ‚àÄ {R a b: Set}, a ‚ü™R‚ü´ b ‚Üí b ‚àà ‚ü¶R, a‚üß := by
  intro R a b H; simp [law_of_relation_class, H]
theorem in_relation_class_elim: ‚àÄ {R a b: Set}, b ‚àà ‚ü¶R, a‚üß ‚Üí a ‚ü™R‚ü´ b := by
  intro R a b Hb; rewrite [‚Üê law_of_relation_class]; trivial
noncomputable def quotient_set (a R: Set) := transform a (Œª x: Set => ‚ü¶R, x‚üß)
notation:110 a:111 "/" b: 111  => quotient_set a b
noncomputable def is_patrition (a b: Set) := a = ‚ãÉ b ‚àß (‚àÄ (x y: Set), x ‚àà b ‚Üí y ‚àà b ‚Üí x ‚â† y ‚Üí x ‚à© y = ‚àÖ)
theorem equivalence_relations_quitient_set_partition: ‚àÄ (a R: Set), R ‚àà equivalence_relations a ‚Üí is_patrition a (a / R) := by
  intro a R HR; let ‚ü®HR1, HR2, HR3, HR4‚ü© := in_equivalence_relations_elim HR
  unfold is_patrition; apply And.intro
  . apply set_eq_intro; intro z; apply Iff.intro
    . intro Hz; apply in_unionset_intro (‚ü¶R, z‚üß)
      . unfold quotient_set; apply in_transform_intro z
        . trivial
        . trivial
      . apply in_relation_class_intro; apply HR2; trivial
    . intro Hz; let ‚ü®k, Hk1, Hk2‚ü© := in_unionset_elim Hz
      unfold quotient_set at Hk1; let ‚ü®t, Ht1, Ht2‚ü© := in_transform_elim Hk1
      rewrite [‚Üê Ht2] at Hk2; let Hk3 := in_relation_class_elim Hk2; let Hk4 := relation_elim Hk3
      let HR5 := in_powerset_elim HR1; let Hk5 := HR5 _ Hk4
      let Hk6 := pair_in_cartesian_product_elim Hk5
      simp [Hk6]
  . intro x y Hx Hy Hn; apply set_eq_intro; apply byContradiction; intro Ht; simp at Ht
    let ‚ü®z, Hz‚ü© := Ht; simp [law_of_emptyset] at Hz; apply Hn; unfold quotient_set at Hx Hy
    let ‚ü®zx, Hzx1, Hzx2‚ü© := in_transform_elim Hx
    let ‚ü®zy, Hzy1, Hzy2‚ü© := in_transform_elim Hy
    let ‚ü®Hz1, Hz2‚ü© := in_intersect_elim Hz
    rewrite [‚Üê Hzx2] at Hz1
    rewrite [‚Üê Hzy2] at Hz2
    rewrite [‚Üê Hzx2, ‚Üê Hzy2]; apply set_eq_intro
    intro k; rewrite [law_of_relation_class]; rewrite [law_of_relation_class]
    let Hz3 := in_relation_class_elim Hz1; let Hz4 := in_relation_class_elim Hz2
    let Hz5 := HR4 _ _ _ Hz3 (HR3 _ _ Hz4)
    apply Iff.intro
    . intro H1; apply (HR4 _ _ _ (HR3 _ _ Hz5)); trivial
    . intro H1; apply (HR4 _ _ _ Hz5); trivial
theorem law_of_equivalence_class_eq: ‚àÄ (a R x y: Set), R ‚àà equivalence_relations a ‚Üí x ‚àà a ‚Üí y ‚àà a ‚Üí (‚ü¶R, x‚üß = ‚ü¶R, y‚üß ‚Üî x ‚ü™R‚ü´ y) := by
  intro a R x y HR Hx Hy; apply Iff.intro
  . intro H1; let H2 := (set_eq_elim H1) y; rewrite [law_of_relation_class] at H2; rewrite [law_of_relation_class] at H2
    let ‚ü®_, HR1, _, _‚ü© := in_equivalence_relations_elim HR;
    simp [HR1 _ Hy] at H2; trivial
  . intro H1; apply set_eq_intro; intro z; rewrite [law_of_relation_class]
    rewrite [law_of_relation_class]; let ‚ü®_, _, HR2, HR1‚ü© := in_equivalence_relations_elim HR
    apply Iff.intro
    . intro Hxz; apply HR1 _ _ _ (HR2 _ _ H1) Hxz
    . intro Hyz; apply HR1 _ _ _ H1; trivial

end SetTheory
